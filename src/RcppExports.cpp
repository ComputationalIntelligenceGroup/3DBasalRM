// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// c_box_cutter
std::string c_box_cutter(std::string json_info, NumericVector mins, NumericVector maxs);
RcppExport SEXP neurostr_c_box_cutter(SEXP json_infoSEXP, SEXP minsSEXP, SEXP maxsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type json_info(json_infoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mins(minsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxs(maxsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_box_cutter(json_info, mins, maxs));
    return rcpp_result_gen;
END_RCPP
}
// c_branch_feature_extractor
std::string c_branch_feature_extractor(std::string json_info, bool omitapical, bool omitaxon, bool omitdend, bool correct);
RcppExport SEXP neurostr_c_branch_feature_extractor(SEXP json_infoSEXP, SEXP omitapicalSEXP, SEXP omitaxonSEXP, SEXP omitdendSEXP, SEXP correctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type json_info(json_infoSEXP);
    Rcpp::traits::input_parameter< bool >::type omitapical(omitapicalSEXP);
    Rcpp::traits::input_parameter< bool >::type omitaxon(omitaxonSEXP);
    Rcpp::traits::input_parameter< bool >::type omitdend(omitdendSEXP);
    Rcpp::traits::input_parameter< bool >::type correct(correctSEXP);
    rcpp_result_gen = Rcpp::wrap(c_branch_feature_extractor(json_info, omitapical, omitaxon, omitdend, correct));
    return rcpp_result_gen;
END_RCPP
}
// c_cut_node_feature_extractor
std::vector<std::map<std::string, std::vector<float>>> c_cut_node_feature_extractor(std::string json_info, NumericVector id_nodes, bool omitapical, bool omitaxon, bool omitdend, bool correct, bool remove_zjumps);
RcppExport SEXP neurostr_c_cut_node_feature_extractor(SEXP json_infoSEXP, SEXP id_nodesSEXP, SEXP omitapicalSEXP, SEXP omitaxonSEXP, SEXP omitdendSEXP, SEXP correctSEXP, SEXP remove_zjumpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type json_info(json_infoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id_nodes(id_nodesSEXP);
    Rcpp::traits::input_parameter< bool >::type omitapical(omitapicalSEXP);
    Rcpp::traits::input_parameter< bool >::type omitaxon(omitaxonSEXP);
    Rcpp::traits::input_parameter< bool >::type omitdend(omitdendSEXP);
    Rcpp::traits::input_parameter< bool >::type correct(correctSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_zjumps(remove_zjumpsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_cut_node_feature_extractor(json_info, id_nodes, omitapical, omitaxon, omitdend, correct, remove_zjumps));
    return rcpp_result_gen;
END_RCPP
}
// c_get_cut_nodes
NumericMatrix c_get_cut_nodes(std::string json_info);
RcppExport SEXP neurostr_c_get_cut_nodes(SEXP json_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type json_info(json_infoSEXP);
    rcpp_result_gen = Rcpp::wrap(c_get_cut_nodes(json_info));
    return rcpp_result_gen;
END_RCPP
}
// c_get_root_neurite_nodes
List c_get_root_neurite_nodes(std::string json_info);
RcppExport SEXP neurostr_c_get_root_neurite_nodes(SEXP json_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type json_info(json_infoSEXP);
    rcpp_result_gen = Rcpp::wrap(c_get_root_neurite_nodes(json_info));
    return rcpp_result_gen;
END_RCPP
}
// c_get_terminal_nodes
NumericMatrix c_get_terminal_nodes(std::string json_info);
RcppExport SEXP neurostr_c_get_terminal_nodes(SEXP json_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type json_info(json_infoSEXP);
    rcpp_result_gen = Rcpp::wrap(c_get_terminal_nodes(json_info));
    return rcpp_result_gen;
END_RCPP
}
// c_neurite_feature_extractor
std::string c_neurite_feature_extractor(std::string json_info, bool omitapical, bool omitaxon, bool omitdend, bool correct);
RcppExport SEXP neurostr_c_neurite_feature_extractor(SEXP json_infoSEXP, SEXP omitapicalSEXP, SEXP omitaxonSEXP, SEXP omitdendSEXP, SEXP correctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type json_info(json_infoSEXP);
    Rcpp::traits::input_parameter< bool >::type omitapical(omitapicalSEXP);
    Rcpp::traits::input_parameter< bool >::type omitaxon(omitaxonSEXP);
    Rcpp::traits::input_parameter< bool >::type omitdend(omitdendSEXP);
    Rcpp::traits::input_parameter< bool >::type correct(correctSEXP);
    rcpp_result_gen = Rcpp::wrap(c_neurite_feature_extractor(json_info, omitapical, omitaxon, omitdend, correct));
    return rcpp_result_gen;
END_RCPP
}
// c_neurite_feature_extractor_prueba
std::vector<std::map<std::string, std::vector<float>>> c_neurite_feature_extractor_prueba(std::string json_info, bool omitapical, bool omitaxon, bool omitdend, bool correct, bool remove_zjumps);
RcppExport SEXP neurostr_c_neurite_feature_extractor_prueba(SEXP json_infoSEXP, SEXP omitapicalSEXP, SEXP omitaxonSEXP, SEXP omitdendSEXP, SEXP correctSEXP, SEXP remove_zjumpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type json_info(json_infoSEXP);
    Rcpp::traits::input_parameter< bool >::type omitapical(omitapicalSEXP);
    Rcpp::traits::input_parameter< bool >::type omitaxon(omitaxonSEXP);
    Rcpp::traits::input_parameter< bool >::type omitdend(omitdendSEXP);
    Rcpp::traits::input_parameter< bool >::type correct(correctSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_zjumps(remove_zjumpsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_neurite_feature_extractor_prueba(json_info, omitapical, omitaxon, omitdend, correct, remove_zjumps));
    return rcpp_result_gen;
END_RCPP
}
// c_neuro_converter2
std::string c_neuro_converter2(std::string ifile, bool correct, float eps);
RcppExport SEXP neurostr_c_neuro_converter2(SEXP ifileSEXP, SEXP correctSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type ifile(ifileSEXP);
    Rcpp::traits::input_parameter< bool >::type correct(correctSEXP);
    Rcpp::traits::input_parameter< float >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_neuro_converter2(ifile, correct, eps));
    return rcpp_result_gen;
END_RCPP
}
// c_neuro_converter
std::string c_neuro_converter(std::string ifile, bool correct, float eps);
RcppExport SEXP neurostr_c_neuro_converter(SEXP ifileSEXP, SEXP correctSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type ifile(ifileSEXP);
    Rcpp::traits::input_parameter< bool >::type correct(correctSEXP);
    Rcpp::traits::input_parameter< float >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_neuro_converter(ifile, correct, eps));
    return rcpp_result_gen;
END_RCPP
}
// c_node_feature_extractor
std::vector<std::map<std::string, std::vector<float>>> c_node_feature_extractor(std::string json_info, bool omitapical, bool omitaxon, bool omitdend, bool correct, bool remove_zjumps);
RcppExport SEXP neurostr_c_node_feature_extractor(SEXP json_infoSEXP, SEXP omitapicalSEXP, SEXP omitaxonSEXP, SEXP omitdendSEXP, SEXP correctSEXP, SEXP remove_zjumpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type json_info(json_infoSEXP);
    Rcpp::traits::input_parameter< bool >::type omitapical(omitapicalSEXP);
    Rcpp::traits::input_parameter< bool >::type omitaxon(omitaxonSEXP);
    Rcpp::traits::input_parameter< bool >::type omitdend(omitdendSEXP);
    Rcpp::traits::input_parameter< bool >::type correct(correctSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_zjumps(remove_zjumpsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_node_feature_extractor(json_info, omitapical, omitaxon, omitdend, correct, remove_zjumps));
    return rcpp_result_gen;
END_RCPP
}
// c_simulated_position
List c_simulated_position(std::string json_info, NumericMatrix new_nodes, NumericVector is_bifurcation, int init_id, bool omitapical, bool omitaxon, bool omitdend, bool correct, bool remove_zjumps);
RcppExport SEXP neurostr_c_simulated_position(SEXP json_infoSEXP, SEXP new_nodesSEXP, SEXP is_bifurcationSEXP, SEXP init_idSEXP, SEXP omitapicalSEXP, SEXP omitaxonSEXP, SEXP omitdendSEXP, SEXP correctSEXP, SEXP remove_zjumpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type json_info(json_infoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type new_nodes(new_nodesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type is_bifurcation(is_bifurcationSEXP);
    Rcpp::traits::input_parameter< int >::type init_id(init_idSEXP);
    Rcpp::traits::input_parameter< bool >::type omitapical(omitapicalSEXP);
    Rcpp::traits::input_parameter< bool >::type omitaxon(omitaxonSEXP);
    Rcpp::traits::input_parameter< bool >::type omitdend(omitdendSEXP);
    Rcpp::traits::input_parameter< bool >::type correct(correctSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_zjumps(remove_zjumpsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_simulated_position(json_info, new_nodes, is_bifurcation, init_id, omitapical, omitaxon, omitdend, correct, remove_zjumps));
    return rcpp_result_gen;
END_RCPP
}
